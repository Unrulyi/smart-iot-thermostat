/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/d5b4b6be-9b89-4904-94e6-56d6f4e1db8d 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float manualTemp;
  CloudLight led;
  CloudTemperatureSensor temperature;
  int servo;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Servo.h>

// OLED display constructor with I2C address 0x3C (default)
#define OLED_RESET -1
Adafruit_SSD1306 display(OLED_RESET);

const int lm34Pin = A0;
const int ledPin = 2;
const int transistorPin = 4;
const float thresholdC = 16.6; // Example threshold, adjust as needed
Servo myServo;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // Initialize Arduino Cloud connection
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  myServo.attach(0);
  
  pinMode(2,OUTPUT);
  pinMode(transistorPin, OUTPUT);
  
  
  // Initialize the display with 128x32 pixels
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  // Clear the display buffer
  display.clearDisplay();


  // Display text
  display.display();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  pinMode(ledPin, OUTPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  
  
 // Read the voltage from LM34
 int sensorValue = analogRead(lm34Pin);

 // Convert the analog value to temperature (assuming LM34's linear scale)
 float voltage = sensorValue * (3.3 / 4095); // Convert to voltage (3.3V is ESP32's max voltage)
 float temperatureC = (voltage - 0.5) * 100.0; // Convert to Celsius
 float temperatureF = temperatureC * 9.0 / 5.0 + 36.0; // Convert to Fahrenheit


 // Clear the display buffer
  display.clearDisplay();
  
 
  
  //run display
 display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.print("Temperature: ");
  display.print(temperatureF);
  display.print(" F\n");
  display.print("Set Temperature: ");
  display.print(manualTemp);
  
  if(temperatureC >= thresholdC)
  {
    display.print("FAN ON");
  }
  else
  {
    display.print("FAN OFF");
  }
  display.display();

  //manualTemp = (0.555)*(manualTemp - 32);
  temperature = temperatureF;
// Check if temperature exceeds the threshold
  if (temperature >= manualTemp) {
    // Turn on the LED
    digitalWrite(ledPin, HIGH);
    // Turn on the transistor to activate the fan
    digitalWrite(transistorPin, HIGH);
    Serial.println("Temperature exceeded threshold. LED and fan ON.");
  } else {
    // Turn off the LED
    digitalWrite(ledPin, LOW);
    // Turn off the transistor to deactivate the fan
    digitalWrite(transistorPin, LOW);
    Serial.println("Temperature below threshold. LED and fan OFF.");
  }

 // Wait a while before taking the next reading
 delay(1000); // Adjust as needed
 
 
}


/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
  if(led == 1)
  {
    digitalWrite(2,HIGH);
  }
  else
  {
    digitalWrite(2,LOW);
  }
}






/*
  Since ManualTemp is READ_WRITE variable, onManualTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onManualTempChange()  {
  // Add your code here to act upon ManualTemp change
}

/*
  Since Servo is READ_WRITE variable, onServoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoChange()  {
  // Add your code here to act upon Servo change
  myServo.write(servo);
}